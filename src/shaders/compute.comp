#version 450
#extension GL_ARB_separate_shader_objects : enable

#define WORKGROUP_SIZE 32
layout(local_size_x = WORKGROUP_SIZE, local_size_y = 1, local_size_z = 1) in;

layout(set = 0, binding = 0) uniform CameraBufferObject {
    mat4 view;
    mat4 proj;
} camera;

layout(set = 1, binding = 0) uniform Time {
    float deltaTime;
    float totalTime;
};

struct Blade {
    vec4 v0;
    vec4 v1;
    vec4 v2;
    vec4 up;
};

// TODO: Add bindings to:
// 1. Store the input blades
// 2. Write out the culled blades
// 3. Write the total number of blades remaining

// The project is using vkCmdDrawIndirect to use a buffer as the arguments for a draw call
// This is sort of an advanced feature so we've showed you what this buffer should look like
//

layout(set = 2, binding = 0) buffer Blades {
	Blade blades[];
};

layout(set = 2, binding = 1) buffer CulledBlades {
	Blade culledBlades[];
};

layout(set = 2, binding = 2) buffer NumBlades {
    uint vertexCount;   // Write the number of blades remaining here
    uint instanceCount; // = 1
    uint firstVertex;   // = 0
    uint firstInstance; // = 0
} numBlades;

bool inBounds(float value, float bounds) {
    return (value >= -bounds) && (value <= bounds);
}

void main() {
	// Reset the number of blades to 0
    uint idx = gl_GlobalInvocationID.x;
	if (idx == 0) {
		numBlades.vertexCount = 0;
	}
	barrier(); // Wait till all threads reach this point

    Blade blade = blades[idx];
    vec3 v0 = blade.v0.xyz;
    vec3 v1 = blade.v1.xyz;
    vec3 v2 = blade.v2.xyz;
    vec3 up = blade.up.xyz;

    float costheta = blade.v0.w;
    vec3 bitangent = vec3(cos(costheta), 0, sin(costheta));
    vec3 normal = cross(up, bitangent);
    vec3 iv2 = v0 + up;
    float stiffness = blade.up.w;
    float height = blade.v1.w;

    // Orientation culling
    vec3 viewPos = (inverse(camera.view) * vec4(0, 0, 0, 1)).xyz;
    if (abs(dot(normalize(viewPos - v0), normal)) <= 0.1) {
        return;
    }

    // View-frustum culling
    mat4 viewProj = camera.proj * camera.view;
    vec3 m = 0.25 * v0 + 0.5 * v1 + 0.25 * v2;
    vec4 mp = viewProj * vec4(m, 1);
    mp = mp / mp.w;
    if (mp.x < -1.0 || mp.x > 1.0 || mp.y < -1.0 || mp.y > 1.0 || mp.z < 0 || mp.z > 1.0) {
        return;
    }

    // Distance culling
    vec3 viewDir = v0 - viewPos;
    float dproj = length(viewDir - up * (dot(viewDir, up)));
    dproj = length(viewDir);
    const float MAX_DISTANCE = 12.0;
    const int N_LEVEL = 10;
    if (idx % N_LEVEL < int(N_LEVEL * (1.0 - dproj / MAX_DISTANCE))) {
        return;
    }

    // Apply forces on every blade and update the vertices in the buffer
    //vec3 wind = vec3(0.707, 0, 0.707) * 5.0 * cos(totalTime * 5.0);
    vec3 wind = vec3(0.707, 0, 0.707) * 2.0 * (0.5 * cos(totalTime * 10 + 2.0 * cos(mp.x * 123.7 + mp.z * 245.9)) + 0.8) 
                * mix(0.0, 1.0, (height - 1.2));

    float fd = 1.0 - abs(dot(normalize(wind), normalize(v2 - v0)));
    float fr = dot((v2 - v0), up) / height;
    wind *= fd * fr;

    vec3 gE = vec3(0, -1, 0) * 2.0;
    vec3 gF = 0.25 * length(gE) * normal;
    vec3 gravity = gE + gF;
    vec3 recovery = (iv2 - v2) * stiffness;

    vec3 tv2 = v2 + (gravity + recovery + wind) * deltaTime;
    tv2 = tv2 - up * min(up * (tv2 - v0), 0.0);
    tv2 = normalize(tv2 - v0) * height + v0;
    float lproj = length(tv2 - v0 - dot((tv2 - v0), up) * up);
    vec3 tv1 = v0 + height * up * max(1.0 - lproj / height, 0.05 * max(lproj / height, 1.0));

    blades[idx].v1.xyz = tv1;
    blades[idx].v2.xyz = tv2;

    uint atomic = atomicAdd(numBlades.vertexCount, 1);
	culledBlades[atomic] = blades[idx];

}
